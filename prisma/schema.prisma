generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model Roles {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  employees   Employees[]

}

model PackagesCategories {
  id             Int              @id @default(autoincrement())
  name           String
  services       Services[]
  ServicesPrices ServicesPrices[]
}

model Invoices {
  id             Int        @id @default(autoincrement())
  invoiceNumber  String     @unique
  createdAt      DateTime?  @default(now())
  updatedAt      DateTime?  @updatedAt
  customerId     Int
  recieverId     Int
  employeeId     String
  status         String?    @default("Facturado")
  amountToPay    Float?     @default(0)
  totalPaid      Float?     @default(0)
  isPaid         Boolean?   @default(false)
  discount       Float?     @default(0)
  deliveryAmount Float?     @default(0)
  agencyId       Int
  serviceId      Int
  service        Services   @relation(fields: [serviceId], references: [id])
  packages       Packages[]
  agency         Agencies   @relation(fields: [agencyId], references: [id])
  employee       Employees? @relation(fields: [employeeId], references: [id])
  customer       Customers  @relation(fields: [customerId], references: [id])
  reciever       Recievers  @relation(fields: [recieverId], references: [id])
  payments       Payments[]
}



model Payments {
  id                Int              @id @default(autoincrement())
  invoiceId         Int
  invoice           Invoices         @relation(fields: [invoiceId], references: [id])
  amount            Float
  description       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @updatedAt
  paymentMethod   PaymentsMethods? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?
}

model PaymentsMethods {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  payments    Payments[]
}

model Packages {
  id             Int               @id @default(autoincrement())
  hbl            String            @unique
  description    String
  weight         Float
  publicPrice    Float
  isSellByPounds Boolean           @default(true)
  location       String            @default("Facturado")
  updatedAt      DateTime          @default(now())
  createdAt      DateTime          @default(now())
  invoiceId      Int
  history        PackagesHistory[]
  invoice        Invoices          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([hbl, invoiceId, id])
}

model PackagesHistory {
  id        Int      @id @default(autoincrement())
  package   Packages @relation(fields: [packageId], references: [id])
  packageId Int
  status    String
  createdAt DateTime @default(now())
}

model Employees {
  id        String     @id @unique
  firstName String
  lastName  String
  email     String     @unique
  address   String
  phone     String?
  mobile    String
  invoices  Invoices[]
  agencyId  Int
  agency    Agencies   @relation(fields: [agencyId], references: [id])
  role      Roles      @relation(fields: [roleId], references: [id])
  roleId    Int
}

model Customers {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  license   String?
  passport  String?
  email     String?
  address   String?
  phone     String?
  mobile    String      @unique
  invoices  Invoices[]
  recievers Recievers[]
  agencyId  Int
  agency    Agencies    @relation(fields: [agencyId], references: [id])

  @@index(fields: [firstName, lastName, email, mobile])
}

model Recievers {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  ci        String      @unique
  passport  String?
  email     String?
  address   String
  phone     String?
  mobile    String
  customers Customers[]
  invoices  Invoices[]
  agencyId  Int
  agency    Agencies    @relation(fields: [agencyId], references: [id])
  countryId Int?
  country   Countries?  @relation(fields: [countryId], references: [id])
  stateId   Int?
  state     States?     @relation(fields: [stateId], references: [id])
  cityId    Int?
  city      Cities?     @relation(fields: [cityId], references: [id])
}

model States {
  id        Int         @id @default(autoincrement())
  name      String
  countryId Int
  country   Countries   @relation(fields: [countryId], references: [id])
  cities    Cities[]
  Recievers Recievers[]
}

model Cities {
  id         Int         @id @default(autoincrement())
  name       String
  stateId    Int
  postalCode Int
  state      States      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  Recievers  Recievers[]
}

model Countries {
  id        Int         @id @default(autoincrement())
  name      String
  states    States[]
  Recievers Recievers[]
}

model Agencies {
  id          Int       @id @default(autoincrement())
  parentId    Int?      @default(0)
  name        String
  address     String?
  owner       String?
  description String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  phone       String?

  employees      Employees[]
  invoices       Invoices[]
  customers      Customers[]
  recievers      Recievers[]
  services       Services[]
  servicesPrices ServicesPrices[]
}

model ServicesProviders {
  id              Int        @id @default(autoincrement())
  providerName    String
  providerPhone   String
  providerAddress String
  providerEmail   String
  logoUrl         String?
  services        Services[]
}

model Services {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  invoiceCode String
  isActive    Boolean     @default(true)
  serviceType ServiceType @default(Maritimo)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt

  providerId         Int
  provider           ServicesProviders    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  servicesPrices     ServicesPrices[]
  packagesCategories PackagesCategories[]

  agencies Agencies?  @relation(fields: [agencyId], references: [id])
  agencyId Int?
  invoices Invoices[]
}

model ServicesPrices {
  id                Int                @id @default(autoincrement())
  name              String
  description       String
  costPrice         Float              @default(0)
  agencyPrice       Float              @default(0)
  publicPrice       Float              @default(0)
  isSellByPounds    Boolean            @default(true)
  weight            Float?             @default(0)
  serviceId         Int
  service           Services           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  packageCategoryId Int
  packageCategory   PackagesCategories @relation(fields: [packageCategoryId], references: [id])
  Agencies          Agencies?          @relation(fields: [agencyId], references: [id])
  agencyId          Int?
}

enum ServiceType {
  Aereo
  Maritimo
  Mulas
}
